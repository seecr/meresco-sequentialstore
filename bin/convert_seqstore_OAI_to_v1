#!/usr/bin/env python
## begin license ##
#
# "Meresco SequentialStore" contains components facilitating efficient sequentially ordered storing and retrieval.
#
# Copyright (C) 2014 Seecr (Seek You Too B.V.) http://seecr.nl
# Copyright (C) 2014 Stichting Bibliotheek.nl (BNL) http://www.bibliotheek.nl
#
# This file is part of "Meresco SequentialStore"
#
# "Meresco SequentialStore" is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# "Meresco SequentialStore" is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with "Meresco SequentialStore"; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#
## end license ##

from os.path import abspath, dirname                #DO_NOT_DISTRIBUTE
from os import system                               #DO_NOT_DISTRIBUTE
from glob import glob                               #DO_NOT_DISTRIBUTE
from sys import path as systemPath, exit            #DO_NOT_DISTRIBUTE
parentdir = dirname(dirname(abspath(__file__)))     #DO_NOT_DISTRIBUTE
system('find %s -name "*.pyc" | xargs rm -f' % parentdir)  #DO_NOT_DISTRIBUTE
for path in glob(parentdir+'/deps.d/*'):            #DO_NOT_DISTRIBUTE
    systemPath.insert(0, path)                      #DO_NOT_DISTRIBUTE
systemPath.insert(0, parentdir)                     #DO_NOT_DISTRIBUTE

import sys
from sys import argv
from traceback import print_exc
from signal import signal, SIGINT, SIGTERM
from os import listdir, getenv, environ
from os.path import isdir, join
from shutil import rmtree, copyfile

from meresco.oai import OaiJazz
from meresco.sequentialstore.sequentialstorage import SEQSTOREBYNUM_NAME, INDEX_DIR, SequentialStorage, _Index


def convert(directory):
    originalSequentialMultiStorageDir = join(directory, 'sequential-store')
    oaiDir = join(directory, 'oai')
    assert isdir(oaiDir) and isdir(originalSequentialMultiStorageDir)
    oaiJazz = OaiJazz(oaiDir)  # includes check for OaiJazz storage format version

    newMultiSequentialStorageDir = join(directory, 'store')
    for name in listdir(originalSequentialMultiStorageDir):
        print 'processing SequentialStorage named "%s"' % name
        sys.stdout.flush()
        newSequentialStorageDir = join(newMultiSequentialStorageDir, name)
        SequentialStorage(newSequentialStorageDir).close()
        copyfile(join(originalSequentialMultiStorageDir, name), join(newSequentialStorageDir, SEQSTOREBYNUM_NAME))
        newIndex = _Index(join(newSequentialStorageDir, INDEX_DIR))
        signal(SIGINT, shutdown)
        signal(SIGTERM, shutdown)
        try:
            continueAfter = 0
            nrOfRecords = oaiJazz.getNrOfRecords(prefix=name)
            count = 0
            deletes = 0
            print
            while True:
                oaiSelectResult = oaiJazz.oaiSelect(prefix=name, continueAfter=continueAfter)
                records = oaiSelectResult.records
                for record in records:
                    count += 1
                    if count % 1000 == 0:
                        print '\033[1AProcessed %s of %s records (%s deletes, continueAfter %s).' % (count, nrOfRecords, deletes, continueAfter)
                        sys.stdout.flush()
                    if record.isDeleted:
                        deletes += 1
                    else:
                        newIndex[record.identifier] = record.stamp
                continueAfter = oaiSelectResult.continueAfter
                if continueAfter is None:
                    break
        except:
            print_exc()
            sys.stdout.flush()
            sys.stderr.flush()
            raise
        finally:
            print 'closing index\n'
            sys.stdout.flush()
            newIndex.close()
            print '\033[1AProcessed %s of %s records (%s deletes).' % (count, nrOfRecords, deletes)
            print 'processed SequentialStorage named "%s"' % name
            sys.stdout.flush()
            sys.stderr.flush()
    rmtree(originalSequentialMultiStorageDir)


def shutdown(signum, frame):
    print 'shutdown', signum, frame
    sys.stdout.flush()
    if signum == SIGINT:
        raise KeyboardInterrupt
    raise SystemExit


if __name__ == '__main__':
    args = argv[1:]

    if not len(args) == 1:
        print "Usage: %s <directory>" % argv[0]
        print "    directory: parent directory of 'oai' and 'sequential-store'."
        print ""
        print "    Will create a 'store' MultiSequentialStore directory based on the 'oai' and 'sequential-store' directories."
        exit(1)

    directory = args[0]

    maxheap = getenv('PYLUCENE_MAXHEAP')
    if not maxheap:
        environ['PYLUCENE_MAXHEAP'] = '1g'

    convert(directory)
