#!/usr/bin/env python
from os.path import abspath, dirname                #DO_NOT_DISTRIBUTE
from os import system                               #DO_NOT_DISTRIBUTE
from glob import glob                               #DO_NOT_DISTRIBUTE
from sys import path as systemPath, exit            #DO_NOT_DISTRIBUTE
parentdir = dirname(dirname(abspath(__file__)))     #DO_NOT_DISTRIBUTE
system('find %s -name "*.pyc" | xargs rm -f' % parentdir)  #DO_NOT_DISTRIBUTE
for path in glob(parentdir+'/deps.d/*'):            #DO_NOT_DISTRIBUTE
    systemPath.insert(0, path)                      #DO_NOT_DISTRIBUTE
systemPath.insert(0, parentdir)                     #DO_NOT_DISTRIBUTE
print systemPath                                    #DO_NOT_DISTRIBUTE

import sys
from sys import argv
from os import listdir, getenv, environ
from os.path import isdir, join
from shutil import rmtree, copyfile

from meresco.oai import OaiJazz
from meresco.sequentialstore.sequentialstorage import SEQSTOREBYNUM_NAME, INDEX_DIR, SequentialStorage, _Index


def convert(directory):
    originalSequentialMultiStorageDir = join(directory, 'sequential-store')
    oaiDir = join(directory, 'oai')
    assert isdir(oaiDir) and isdir(originalSequentialMultiStorageDir)
    oaiJazz = OaiJazz(oaiDir)  # includes check for OaiJazz storage format version

    newMultiSequentialStorageDir = join(directory, 'store')
    for name in listdir(originalSequentialMultiStorageDir):
        print 'processing SequentialStorage named "%s"' % name
        sys.stdout.flush()
        newSequentialStorageDir = join(newMultiSequentialStorageDir, name)
        SequentialStorage(newSequentialStorageDir).close()
        copyfile(join(originalSequentialMultiStorageDir, name), join(newSequentialStorageDir, SEQSTOREBYNUM_NAME))
        newIndex = _Index(join(newSequentialStorageDir, INDEX_DIR))
        continueAfter = 0
        nrOfRecords = oaiJazz.getNrOfRecords(prefix=name)
        count = 0
        print
        while True:
            oaiSelectResult = oaiJazz.oaiSelect(prefix=name, continueAfter=continueAfter)
            records = oaiSelectResult.records
            for record in records:
                count += 1
                if count % 1000 == 0:
                    print '\033[1AProcessed %s of %s records.' % (count, nrOfRecords)
                    sys.stdout.flush()
                if not record.isDeleted:
                    newIndex[record.identifier] = record.stamp
            continueAfter = oaiSelectResult.continueAfter
            if continueAfter is None:
                break
        newIndex.close()
        print '\033[1AProcessed %s of %s records.' % (count, nrOfRecords)
        print 'processed SequentialStorage named "%s"' % name
        sys.stdout.flush()
    rmtree(originalSequentialMultiStorageDir)


if __name__ == '__main__':
    args = argv[1:]

    if not len(args) == 1:
        print "Usage: %s <directory>" % argv[0]
        print "    directory: parent directory of 'oai' and 'sequential-store'."
        print ""
        print "    Will create a 'store' MultiSequentialStore directory based on the 'oai' and 'sequential-store' directories."
        exit(1)

    directory = args[0]

    maxheap = getenv('PYLUCENE_MAXHEAP')
    if not maxheap:
        environ['PYLUCENE_MAXHEAP'] = '1g'

    convert(directory)
